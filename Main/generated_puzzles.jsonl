{"puzzle_description": "You are working on a backend system that processes user data.  A crucial part of this system is validating user input to prevent errors. You need to write a Python function that checks if a given string represents a valid integer.  The function should return `True` if the string can be converted to an integer, and `False` otherwise.\n\nComplete the following Python function:\n\n```python\ndef is_valid_integer(input_string):\n  # Your code here\n\n# Example usage (you don't need to submit these lines):\nprint(is_valid_integer(\"123\"))  # Should print True\nprint(is_valid_integer(\"3.14\")) # Should print False\nprint(is_valid_integer(\"abc\"))  # Should print False\n```", "domain": "Backend", "difficulty": "Easy", "validation_criteria": "The submitted code must successfully define a function named `is_valid_integer` that takes a single string argument. When called with a string representing a valid integer (e.g., \"123\", \"-42\", \"0\"), the function must return `True`. When called with a string that cannot be converted to an integer (e.g., \"3.14\", \"abc\", \"12a\"), the function must return `False`.  The solution should use a `try-except` block to handle potential `ValueError` exceptions that arise when attempting to convert a non-integer string to an integer.  Solutions that do not use `try-except` will be considered incorrect."}
{"puzzle_description": "What is the correct way to add JavaScript code to an HTML file?\n\nA) `<script src=\"my-script.js\"></script>`\nB) `<javascript>my-script.js</javascript>`\nC) `<script>my-script.js</script>`\nD) `<link rel=\"javascript\" href=\"my-script.js\">`", "domain": "Frontend", "difficulty": "Easy", "validation_criteria": "The correct option is A.  Option A correctly demonstrates how to include an external JavaScript file. Option C would allow inline JavaScript, but the question asks about adding a JavaScript *file*.  The other options are not valid HTML tags for including JavaScript."}
{"puzzle_description": "What is the correct way to add JavaScript code to an HTML file?\n\nA) `<script src=\"my-script.js\"></script>`\nB) `<link rel=\"javascript\" href=\"my-script.js\">`\nC) `<javascript src=\"my-script.js\"></javascript>`\nD) `<script>my-script.js</script>`", "domain": "Frontend", "difficulty": "Easy", "validation_criteria": "The correct option is A.  Option A correctly demonstrates the use of the `<script>` tag with the `src` attribute to link an external JavaScript file.  The other options use incorrect tags or attributes for including JavaScript."}
{"puzzle_description": "What is the output of the following JavaScript code snippet?\n\n```javascript\nconsole.log(typeof []);\n```\n\nA) `array`\nB) `object`\nC) `null`\nD) `undefined`", "domain": "Frontend", "difficulty": "Easy", "validation_criteria": "The correct option is B.  In JavaScript, arrays are technically a type of object."}
{"puzzle_description": "You are building a simple image carousel. You have an array of image URLs and need to display them one at a time, cycling through them when the user clicks a 'Next' button. Implement a JavaScript function `nextImage` that takes two arguments:\n\n1. `images`: An array of image URLs (strings).\n2. `currentImageIndex`: The index of the currently displayed image in the `images` array.\n\nThe `nextImage` function should return the index of the next image to be displayed. The carousel should wrap around, meaning that if the current image is the last one in the array, the next image should be the first one.\n\n```javascript\nfunction nextImage(images, currentImageIndex) {\n  // Your code here\n}\n\n// Example usage:\nconst imageUrls = ['img1.jpg', 'img2.jpg', 'img3.jpg'];\nlet currentIndex = 0;\n\ncurrentIndex = nextImage(imageUrls, currentIndex); // Should return 1\ncurrentIndex = nextImage(imageUrls, currentIndex); // Should return 2\ncurrentIndex = nextImage(imageUrls, currentIndex); // Should return 0\n```", "domain": "Frontend", "difficulty": "Medium", "validation_criteria": "The submitted code for the `nextImage` function must correctly handle the wrapping behavior. Specifically, given an array of `n` images, if the `currentImageIndex` is `n - 1`, the function should return 0. For any other valid `currentImageIndex`, the function should return `currentImageIndex + 1`. The function must not modify the original `images` array.  The solution must not use any external libraries or frameworks."}
{"puzzle_description": "What is the primary purpose of a loss function in machine learning?\n\nA) To measure the performance of a model\nB) To generate random numbers for training data\nC) To pre-process input data\nD) To visualize model predictions", "domain": "AI Engineering", "difficulty": "Easy", "validation_criteria": "The correct option is A."}
{"puzzle_description": "What is the correct way to add JavaScript code to an HTML file?\n\nA) `<script src=\"my-script.js\"></script>`\nB) `<javascript>my-script.js</javascript>`\nC) `<link rel=\"javascript\" href=\"my-script.js\">`\nD) `<script>console.log(\"Hello, World!\");</script>`", "domain": "Frontend", "difficulty": "Easy", "validation_criteria": "The correct option is A and D. Option A is correct for linking an external JavaScript file, while option D is correct for embedding JavaScript code directly within the HTML file.  A valid answer must mention both A and D to be considered correct."}
{"puzzle_description": "What is the output of the following JavaScript code snippet?\n```javascript\nconsole.log(typeof []);\n```\nA) `object`\nB) `array`\nC) `null`\nD) `undefined`", "domain": "Frontend", "difficulty": "Easy", "validation_criteria": "The correct option is A."}
{"puzzle_description": "What is the primary purpose of a loss function in a machine learning model?\n\nA) To predict the next data point in a sequence.\nB) To measure the difference between predicted and actual values.\nC) To transform data into a suitable format for the model.\nD) To visualize the model's performance.", "domain": "AI Engineering", "difficulty": "Easy", "validation_criteria": "The correct option is B."}
{"puzzle_description": "You are tasked with implementing a simple data augmentation pipeline for image classification using TensorFlow/Keras.  Given a TensorFlow dataset `dataset` containing image tensors (shape: (224, 224, 3)) and corresponding labels, write a function `augment_data(dataset)` that applies the following augmentations:\n\n1. Random horizontal flips with a probability of 0.5.\n2. Random rotations within the range of -15 to +15 degrees.\n3. Random brightness adjustments with a factor between 0.8 and 1.2.\n\nYour function should return the augmented dataset.  Assume necessary imports are already handled (e.g., `tensorflow`, `tensorflow.keras.layers.experimental.preprocessing`).\n\n```python\nimport tensorflow as tf\nimport tensorflow.keras.layers.experimental.preprocessing as preprocessing\n\ndef augment_data(dataset):\n  # Your code here\n  pass\n\n# Example usage (not part of the solution, for illustration only)\n# dataset = tf.data.Dataset.from_tensor_slices((images, labels)) # Assume images and labels are defined elsewhere\n# augmented_dataset = augment_data(dataset)\n```", "domain": "AI Engineering", "difficulty": "Medium", "validation_criteria": "The submitted code must define a function `augment_data(dataset)` that takes a TensorFlow dataset as input and returns a new dataset with the specified augmentations applied. The augmentations must include random horizontal flips (probability 0.5), random rotations (-15 to +15 degrees), and random brightness adjustments (factor 0.8 to 1.2) using the appropriate Keras preprocessing layers. The function should work correctly when provided with a TensorFlow dataset containing image tensors of shape (224, 224, 3) and corresponding labels. Specifically, the code should use `RandomFlip(\"horizontal\")`, `RandomRotation(0.2618)`, and `RandomBrightness(0.2)` (or equivalent calculations for the rotation factor) within a `map` function applied to the dataset. The returned dataset should contain augmented images and their corresponding original labels."}
{"puzzle_description": "You are tasked with implementing a simple data augmentation pipeline for image classification using TensorFlow.  Given a TensorFlow dataset `dataset` containing image tensors (shape [height, width, channels]), create a function `augment_data(dataset)` that applies the following augmentations in sequence:\n\n1. Random horizontal flips with a 50% probability.\n2. Random rotation within the range of -15 to +15 degrees.\n3. Random brightness adjustments with a delta of 0.2.\n\nYour function should return the augmented dataset.\n\n```python\nimport tensorflow as tf\n\n# Example dataset (replace with your actual dataset during testing)\ndataset = tf.data.Dataset.from_tensor_slices(tf.random.normal([10, 32, 32, 3]))\n\ndef augment_data(dataset):\n  # Your code here\n  pass\n\n# Example usage (you can uncomment this for testing)\n# augmented_dataset = augment_data(dataset)\n# for image in augmented_dataset.take(1):\n#   print(image.shape)\n```", "domain": "AI Engineering", "difficulty": "Medium", "validation_criteria": "The submitted code must define a function `augment_data(dataset)` that takes a TensorFlow dataset as input and returns a new dataset with the specified augmentations applied. The augmentations must be applied in the correct order: random horizontal flip, random rotation, then random brightness adjustment. The function should utilize `tf.image.random_flip_left_right`, `tf.image.rot90`, and `tf.image.random_brightness` correctly with the specified parameters.  Specifically, `tf.image.rot90` should be implemented to handle rotations within the -15 to +15 degree range by calculating the appropriate number of 90-degree rotations and using tf.image.rotate. No other augmentations should be applied. The code should not raise any errors when executed with a valid TensorFlow dataset."}
{"puzzle_description": "You are building a machine learning pipeline using scikit-learn. You have a training dataset `X_train` and `y_train` and want to train a Logistic Regression model.  You also want to apply StandardScaler to your features before training.  Complete the code below to implement this pipeline correctly using a `Pipeline` object from scikit-learn.\n\n```python\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\n\nX_train = [[1, 2], [3, 4], [5, 6]]  # Example data\ny_train = [0, 1, 0]  # Example labels\n\n# Create and train the pipeline\npipeline =  Pipeline([\n    # Add the StandardScaler and LogisticRegression steps here\n])\npipeline.fit(X_train, y_train)\n\n# Predict using the trained pipeline\npredictions = pipeline.predict(X_train)\nprint(predictions)\n```", "domain": "AI Engineering", "difficulty": "Medium", "validation_criteria": "The submitted code must use a scikit-learn `Pipeline` object. The pipeline must include `StandardScaler` as the first step, named 'scaler', and `LogisticRegression` as the second step, named 'model'.  The code should successfully train the pipeline using `fit` and make predictions using `predict` on `X_train` without errors. The printed output should be the predicted labels which should be `[0 1 0]` when using the provided example `X_train` and `y_train`."}
{"puzzle_description": "You are building an AI-powered image classification system.  You have a pre-trained model that outputs probabilities for different image classes.  You need to implement a function that takes these probabilities and returns the top 3 most likely classes along with their probabilities.\n\n```python\ndef get_top_predictions(predictions: dict, k: int = 3) -> list:\n  \"\"\"Returns the top k predictions from a dictionary of predictions.\n\n  Args:\n      predictions: A dictionary where keys are class labels (strings) and values are probabilities (floats between 0 and 1).\n      k: The number of top predictions to return.\n\n  Returns:\n      A list of tuples, where each tuple contains (class_label, probability) for the top k classes. The list is sorted in descending order of probability.\n  \"\"\"\n  # Your code here\n\n# Example usage\npredictions = {\"cat\": 0.7, \"dog\": 0.2, \"bird\": 0.05, \"fish\": 0.05}\nresult = get_top_predictions(predictions)\nprint(result) # Expected output: [('cat', 0.7), ('dog', 0.2), ('bird', 0.05)]\n\nresult = get_top_predictions(predictions, k=2)\nprint(result) # Expected output: [('cat', 0.7), ('dog', 0.2)]\n```", "domain": "AI Engineering", "difficulty": "Medium", "validation_criteria": "The submitted code must implement the `get_top_predictions` function correctly.  It should return a list of tuples sorted in descending order of probability. The function should handle the `k` parameter correctly, returning the top `k` predictions.  For the provided example `predictions` dictionary, the output should match the specified expected outputs in the puzzle description.  Specifically, for `get_top_predictions(predictions)` the output should be `[('cat', 0.7), ('dog', 0.2), ('bird', 0.05)]`, and for `get_top_predictions(predictions, k=2)` the output should be `[('cat', 0.7), ('dog', 0.2)]`. The function should also handle edge cases such as empty input dictionaries or a `k` value larger than the number of predictions gracefully (e.g., returning all available predictions if k is larger than the number of items in the input dictionary)."}
{"puzzle_description": "You are tasked with implementing a simple data augmentation pipeline for image classification using TensorFlow/Keras.  Given a TensorFlow Dataset object `dataset` containing image tensors (shape (28, 28, 1)) and corresponding labels, create a new dataset that applies two augmentations: random horizontal flips and random rotations (up to 45 degrees).  You can assume the necessary imports (`tensorflow`, `tensorflow_datasets` etc.) are already handled.\n\n```python\nimport tensorflow as tf\nimport tensorflow_datasets as tfds\n\ndef augment_dataset(dataset):\n  # Your code here\n  pass\n\n# Example usage (not part of the solution, for illustration only)\n(ds_train, ds_test), ds_info = tfds.load(\n    'mnist',\n    split=['train', 'test'],\n    shuffle_files=True,\n    as_supervised=True,\n    with_info=True,\n)\nds_train = ds_train.map(lambda x, y: (tf.expand_dims(x, -1), y))\n\naugmented_dataset = augment_dataset(ds_train)\n```", "domain": "AI Engineering", "difficulty": "Medium", "validation_criteria": "The `augment_dataset` function must modify the input `dataset` using the Keras `map` function and apply two augmentations sequentially within the mapping function.  The first augmentation should be a random horizontal flip using `tf.image.flip_left_right`. The second augmentation should be a random rotation using `tf.image.rot90` with a randomly chosen number of rotations between 0 and 3 (inclusive), effectively giving rotations of 0, 90, 180, or 270 degrees. The function should return the new, augmented dataset object.  The labels should remain unchanged during the augmentation process.  Specifically, the code inside the `map` function should include a call to `tf.image.flip_left_right` and `tf.image.rot90` with the `k` argument determined by `tf.random.uniform(shape=[], minval=0, maxval=4, dtype=tf.int32)`."}
{"puzzle_description": "What is the output of the following Python code snippet?\n\n```python\nprint(10 + 5 * 2)\n```\nA) 20\nB) 30\nC) 100\nD) 15", "domain": "Backend", "difficulty": "Easy", "validation_criteria": "The correct answer is A.  The code will perform multiplication before addition due to operator precedence.  5 * 2 equals 10, then adding 10 results in 20."}
{"puzzle_description": "You are tasked with designing a database schema for a library system. You need to store information about books, authors, and the relationship between them.  A book can have multiple authors, and an author can write multiple books.  Which of the following database schema designs best represents this many-to-many relationship?\n\nA) A single table called `books` with columns for `book_id`, `title`, and a comma-separated list of `author_names`.\n\nB) Two tables: `books` with columns `book_id` and `title`, and `authors` with columns `author_id` and `author_name`.  A new column `author_id` is added to the `books` table.\n\nC) Three tables: `books` with columns `book_id` and `title`, `authors` with columns `author_id` and `author_name`, and a junction table `book_authors` with columns `book_id` and `author_id`.\n\nD) Two tables: `books` with columns `book_id`, `title`, and `author_id`, and `authors` with columns `author_id` and `author_name`.", "domain": "Database", "difficulty": "Medium", "validation_criteria": "The correct option is C. Option C correctly implements a many-to-many relationship using a junction table. This allows for multiple authors per book and multiple books per author without data redundancy or limitations."}
